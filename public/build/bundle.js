var codex = codex || {}; codex["notes"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/javascripts/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@codexteam/shortcuts/lib/shortcuts.js":
/*!************************************************************!*\
  !*** ./node_modules/@codexteam/shortcuts/lib/shortcuts.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Library for handling keyboard shortcuts\n * @copyright undefined\n * @license MIT\n * @author CodeX (https://ifmo.su)\n * @version 1.0.0\n */\n!function(e,t){if(true)module.exports=t();else { var r, n; }}(\"undefined\"!=typeof self?self:this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=0)}([function(e,t,n){\"use strict\";function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i={0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,BACKSPACE:8,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,INSERT:45,DELETE:46},u={CMD:[\"CMD\",\"CONTROL\",\"COMMAND\",\"WINDOWS\",\"CTRL\"],SHIFT:[\"SHIFT\"],ALT:[\"ALT\",\"OPTION\"]},c=function(){function e(t){var n=this;r(this,e),this.commands={},this.keys={},this.parseShortcutName(t.name),this.element=t.on,this.callback=t.callback,this.executeShortcut=function(e){n.execute(e)},this.element.addEventListener(\"keydown\",this.executeShortcut,!1)}return o(e,[{key:\"parseShortcutName\",value:function(e){e=e.split(\"+\");for(var t=0;t<e.length;t++)if(e[t]=e[t].toUpperCase(),e[t].length>1)for(var n in u)u[n].includes(e[t])&&(this.commands[n]=!0);else this.keys[e[t]]=!0}},{key:\"execute\",value:function(e){var t=e.ctrlKey||e.metaKey,n=e.shiftKey,r=e.altKey,o={CMD:t,SHIFT:n,ALT:r},u=void 0,c=!0;for(u in this.commands)c=c&&o[u];var a=void 0,s=!0;for(a in this.keys)s=s&&e.keyCode===i[a];c&&s&&this.callback(e)}},{key:\"remove\",value:function(){this.element.removeEventListener(\"keydown\",this.executeShortcut)}}]),e}();t.default=c}])});\n\n//# sourceURL=webpack://codex.notes/./node_modules/@codexteam/shortcuts/lib/shortcuts.js?");

/***/ }),

/***/ "./public/javascripts/app.js":
/*!***********************************!*\
  !*** ./public/javascripts/app.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Load libraries\n */\n\nvar _user = __webpack_require__(/*! ./user */ \"./public/javascripts/user.js\");\n\nvar _user2 = _interopRequireDefault(_user);\n\nvar _statusBar = __webpack_require__(/*! ./status-bar */ \"./public/javascripts/status-bar.js\");\n\nvar _statusBar2 = _interopRequireDefault(_statusBar);\n\nvar _connectionObserver = __webpack_require__(/*! ./connection-observer */ \"./public/javascripts/connection-observer.js\");\n\nvar _connectionObserver2 = _interopRequireDefault(_connectionObserver);\n\nvar _authObserver = __webpack_require__(/*! ./auth-observer */ \"./public/javascripts/auth-observer.js\");\n\nvar _authObserver2 = _interopRequireDefault(_authObserver);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar electron = __webpack_require__(/*! electron */ \"electron\");\nvar Editor = __webpack_require__(/*! ./editor */ \"./public/javascripts/editor.js\").default;\n\n/**\n * Load components\n */\nvar Aside = __webpack_require__(/*! ./aside */ \"./public/javascripts/aside.js\").default;\nvar Note = __webpack_require__(/*! ./note */ \"./public/javascripts/note.js\").default;\n\n/**\n * Save render proccess to the ipdRender global propery\n */\nwindow.ipcRenderer = electron.ipcRenderer;\n\n/**\n * Disable zoom\n */\nelectron.webFrame.setVisualZoomLevelLimits(1, 1);\n\n/**\n * Load CSS\n */\n__webpack_require__(/*! ../stylesheets/base.css */ \"./public/stylesheets/base.css\");\n\n/**\n * Document ready callback\n */\nvar documentReady = function documentReady() {\n  /**\n  * Initiate modules\n  * @type {Aside}\n  */\n  codex.notes.editor = new Editor();\n  codex.notes.aside = new Aside();\n  codex.notes.note = new Note();\n  codex.notes.user = new _user2.default();\n  codex.notes.statusBar = new _statusBar2.default();\n  codex.notes.connectionObserver = new _connectionObserver2.default();\n  codex.notes.authObserver = new _authObserver2.default({\n    onLogin: function onLogin(user) {\n      codex.notes.user.fillUserPanel(user);\n      codex.notes.aside.folderSettings.toggleCollaboratorInput();\n    }\n  });\n\n  codex.notes.authObserver.login(codex.notes.user.userData);\n\n  /**\n   * New note saving handler\n   */\n  window.ipcRenderer.on('note saved', function (event, response) {\n    codex.notes.note.addToMenu(response);\n  });\n};\n\nvar openExternalLink = function openExternalLink(event) {\n  if (event.target.tagName !== 'A' || !event.target.href) {\n    return;\n  }\n\n  if (!event.target.closest('.editor')) {\n    electron.shell.openExternal(event.target.href);\n    return;\n  }\n\n  if (event.metaKey || event.ctrlKey) {\n    electron.shell.openExternal(event.target.href);\n  }\n};\n\n/**\n * Application\n */\nmodule.exports = function () {\n  document.addEventListener('DOMContentLoaded', documentReady, false);\n  document.addEventListener('click', openExternalLink);\n\n  /**\n   * Allow access modules with codex.notes[module]\n   */\n  return {};\n}();\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/app.js?");

/***/ }),

/***/ "./public/javascripts/aside-swiper.js":
/*!********************************************!*\
  !*** ./public/javascripts/aside-swiper.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SwipeDetector = __webpack_require__(/*! ./swipe-detector */ \"./public/javascripts/swipe-detector.js\").default;\n\n/**\n * Aside swiper class\n * @property {object} CSS dictionary\n */\n\nvar AsideSwiper = function () {\n  /**\n   * @constructor\n   * @param {Function} opened  - opening callback\n   * @param {Function} closed  - closing callback\n   */\n  function AsideSwiper(_ref) {\n    var _this = this;\n\n    var opened = _ref.opened,\n        closed = _ref.closed;\n\n    _classCallCheck(this, AsideSwiper);\n\n    this.CSS = {\n      wrapper: 'aside-swiper',\n      toggled: 'aside-swiper--toggled',\n      left: 'aside-swiper__left',\n      right: 'aside-swiper__right'\n    };\n\n    this.wrapper = document.querySelector('.' + this.CSS.wrapper);\n    this.left = this.wrapper.querySelector('.' + this.CSS.left);\n    this.right = this.wrapper.querySelector('.' + this.CSS.right);\n\n    this.opened = opened || function () {};\n    this.closed = closed || function () {};\n\n    /**\n     * Allow to open/close by two-fingers swipe left/right\n     */\n    new SwipeDetector(this.wrapper, function (directionRight) {\n      if (directionRight) {\n        _this.open();\n      } else {\n        _this.close();\n      }\n    });\n  }\n\n  /**\n   * Swipe left menu, shows folder section\n   */\n\n\n  _createClass(AsideSwiper, [{\n    key: 'open',\n    value: function open() {\n      this.wrapper.classList.add(this.CSS.toggled);\n      this.opened();\n    }\n\n    /**\n     * Toggle off folder section\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      this.wrapper.classList.remove(this.CSS.toggled);\n      this.closed();\n    }\n  }]);\n\n  return AsideSwiper;\n}();\n\nexports.default = AsideSwiper;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/aside-swiper.js?");

/***/ }),

/***/ "./public/javascripts/aside.js":
/*!*************************************!*\
  !*** ./public/javascripts/aside.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _folder = __webpack_require__(/*! ./folder */ \"./public/javascripts/folder.js\");\n\nvar _folder2 = _interopRequireDefault(_folder);\n\nvar _note = __webpack_require__(/*! ./note */ \"./public/javascripts/note.js\");\n\nvar _note2 = _interopRequireDefault(_note);\n\nvar _folderSettings = __webpack_require__(/*! ./folder-settings */ \"./public/javascripts/folder-settings.js\");\n\nvar _folderSettings2 = _interopRequireDefault(_folderSettings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AsideSwiper = __webpack_require__(/*! ./aside-swiper */ \"./public/javascripts/aside-swiper.js\").default;\nvar $ = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\").default;\n\n/**\n * Maximum chars at the menu title\n * @type {Number}\n */\nvar menuItemTitleMaxLength = 68;\n\n/**\n * Aside column module\n *\n * @property {object}          this.CSS                     classnames dictionary\n * @property {AsideSwiper}     this.swiper                  AsideSwiper instance\n * @property {Folder}          this.currentFolder           Opened folder instance\n * @property {Folder}          this.previouslyOpenedFolder  See docs in {@link Aside#constructor}\n * @property {Element}         this.newFolderButton         New folder button\n * @property {Element}         this.newFolderField          New folder form field\n * @property {FolderSettings}  this.folderSettings          Folder Settings Panel instance\n */\n\nvar Aside = function () {\n  _createClass(Aside, null, [{\n    key: 'CSS',\n\n    /**\n     * Make CSS dictionary\n     * @type {Object}\n     */\n    get: function get() {\n      return {\n        notesMenuLoading: 'notes-list--loading',\n        noteListItem: 'notes-list__content-item',\n        notSeenState: 'notes-list__content-item--not-seen'\n      };\n    }\n    /**\n     * @constructor\n     */\n\n  }]);\n\n  function Aside() {\n    var _this = this;\n\n    _classCallCheck(this, Aside);\n\n    /**\n     * Find notes list holder\n     * @type {Element}\n     */\n    var notesMenu = document.querySelector('[name=\"js-notes-menu\"]'),\n        foldersMenu = document.querySelector('[name=\"js-folders-menu\"]');\n\n    /**\n     * Module for hide/show folder sections\n     * @type {AsideSwiper}\n     */\n    this.swiper = new AsideSwiper({\n      opened: function opened() {\n        return _this.folderOpened();\n      },\n      closed: function closed() {\n        return _this.folderClosed();\n      }\n    });\n\n    /**\n     * Current opened folder.\n     * @type {Folder}\n     */\n    this.currentFolder = null;\n\n    /**\n     * Save previously opened folder id.\n     * Usecase:\n     *   - Folder opened by click in menu (and saved in {@link Aside#currentFolder})\n     *   - Folder closed by swipe-left on Aside (this.currentFolder = null)\n     *   - User makes swipe-right to open Folder back, but we have not its ID\n     *   - So we use previouslyOpenedFolder to construct this.currentFolder again\n     */\n    this.previouslyOpenedFolder = null;\n\n    /**\n     * Show preloader\n     */\n    notesMenu.classList.add(Aside.CSS.notesMenuLoading);\n    foldersMenu.classList.add(Aside.CSS.notesMenuLoading);\n\n    /**\n     * Emit message to load list\n     */\n    this.loadNotes();\n    this.loadFolders();\n\n    /**\n     * Update folder list\n     */\n    window.ipcRenderer.on('update folders list', function (event, _ref) {\n      var userFolders = _ref.userFolders;\n\n      foldersMenu.classList.remove(Aside.CSS.notesMenuLoading);\n      foldersMenu.innerHTML = '';\n      userFolders.forEach(function (folder) {\n        return _this.addFolder(folder);\n      });\n    });\n\n    /**\n     * Update notes list\n     */\n    window.ipcRenderer.on('notes list - update', function (event, _ref2) {\n      var notes = _ref2.notes,\n          isRootFolder = _ref2.isRootFolder;\n\n      notesMenu.classList.remove(Aside.CSS.notesMenuLoading);\n      notes.forEach(function (note) {\n        return _this.addMenuItem(note, isRootFolder);\n      });\n    });\n\n    /**\n     * Activate new note button\n     */\n    var newNoteButtons = document.querySelectorAll('[name=\"js-new-note-button\"]');\n\n    newNoteButtons.forEach(function (button) {\n      button.addEventListener('click', function () {\n        return _this.newNoteButtonClicked(button);\n      });\n    });\n\n    /**\n     * Activate new folder button\n     */\n    this.newFolderButton = document.querySelector('[name=\"js-new-folder-button\"]');\n    this.newFolderField = document.querySelector('[name=\"js-new-folder-field\"]');\n\n    var newFolderInput = this.newFolderField.querySelector('input');\n\n    this.newFolderButton.addEventListener('click', function (event) {\n      return _this.newFolderButtonClicked(event);\n    });\n    newFolderInput.addEventListener('keydown', function (event) {\n      return _this.newFolderInputFilled(event);\n    });\n\n    /**\n     * Activate folders Back button\n     */\n    var folderCloseToggler = $.get('folder-close-zone');\n\n    folderCloseToggler.addEventListener('click', function () {\n      _this.closeFolder();\n    });\n\n    this.activateScrollableGradient();\n\n    /**\n     * Active 'Folder Settings' panel\n     */\n    this.folderSettings = new _folderSettings2.default();\n\n    window.ipcRenderer.on('note updated', function (event, _ref3) {\n      var note = _ref3.note,\n          isRootFolder = _ref3.isRootFolder;\n\n      if (!note.isRemoved) {\n        _this.addMenuItem(note, isRootFolder);\n      } else {\n        _this.removeMenuItem(note._id);\n      }\n\n      /**\n       * Reload current opened note with the new data\n       */\n      if (note._id === codex.notes.note.currentNoteId) {\n        codex.notes.note.render(note, true);\n      }\n    });\n\n    window.ipcRenderer.on('folder updated', function (event, folder) {\n      if (!folder.isRemoved) {\n        _this.addFolder(folder);\n        /**\n         * Update title of opened folder\n         */\n        if (_this.currentFolder && _this.currentFolder._id && _this.currentFolder._id === folder._id) {\n          _this.currentFolder.title = folder.title;\n        }\n      } else {\n        _this.removeFolderFromMenu(folder._id);\n      }\n    });\n\n    /**\n     * Force open target note\n     */\n    window.ipcRenderer.on('open note', function (event, _ref4) {\n      var note = _ref4.note;\n\n      codex.notes.note.render(note);\n    });\n\n    /**\n     * Show update button\n     */\n    window.ipcRenderer.on('show update button', function () {\n      _this.showUpdateAppButton();\n    });\n  }\n\n  /**\n   * Loads notes list from the server\n   *\n   * Can be used async with subscription\n   * on window.ipcRenderer.on('notes list - update', (event, {notes, folder}) => {})\n   *\n   * or synchronously like loadNotes().then( notes => {})\n   *\n   * @param  {string|null} folderId\n   * @returns {<Promise>.[]}\n   */\n\n\n  _createClass(Aside, [{\n    key: 'loadNotes',\n    value: function loadNotes() {\n      var folderId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      return new Promise(function (resolve) {\n        var response = window.ipcRenderer.sendSync('notes list - load', folderId);\n        /**\n         * @var {object} response\n         * @var {array}  response.notes\n         * @var {object} response.folder\n         * @var {number} response.folder.id\n         * @var {string} response.folder.title\n         * @var {Boolean} response.isRootFolder\n         */\n\n        resolve(response);\n      }).catch(function (error) {\n        console.log('Error while loading notes: ', error);\n      });\n    }\n\n    /**\n     * Loads folders list\n     */\n\n  }, {\n    key: 'loadFolders',\n    value: function loadFolders() {\n      window.ipcRenderer.send('folders list - load');\n    }\n\n    /**\n     * New note button click handler\n     * @this {Aside}\n     */\n\n  }, {\n    key: 'newNoteButtonClicked',\n    value: function newNoteButtonClicked() {\n      _note2.default.focusEditor();\n\n      codex.notes.note.clear();\n    }\n\n    /**\n     * New folder button click handler\n     * @param {MouseEvent} event\n     */\n\n  }, {\n    key: 'newFolderButtonClicked',\n    value: function newFolderButtonClicked(event) {\n      var button = event.target,\n          input = this.newFolderField.querySelector('input');\n\n      button.classList.add('hide');\n      this.newFolderField.classList.remove('hide');\n\n      input.focus();\n    }\n\n    /**\n     * New Folder input keydown handler\n     * @param {KeyboardEvent} event\n     */\n\n  }, {\n    key: 'newFolderInputFilled',\n    value: function newFolderInputFilled(event) {\n      if (event.key !== 'Enter') {\n        return;\n      }\n\n      var input = event.target,\n          folderTitle = input.value.trim();\n\n      if (!folderTitle) {\n        return;\n      }\n\n      /**\n       * Save Folder\n       * @type {object}\n       */\n      var createdFolder = window.ipcRenderer.sendSync('folder - create', folderTitle);\n\n      /**\n       * Add saved folder to the menu\n       */\n      this.addFolder(createdFolder);\n\n      input.value = '';\n\n      this.newFolderField.classList.add('hide');\n      this.newFolderButton.classList.remove('hide');\n    }\n\n    /**\n     * Add a Note to the left menu\n     *\n     * @param {object} noteData\n     * @param {number} noteData._id\n     * @param {string} noteData.title\n     * @param {number} noteData.folderId\n     *\n     * @param {Boolean} isRootFolder - true if Note is included to the Root Folder\n     */\n\n  }, {\n    key: 'addMenuItem',\n    value: function addMenuItem(noteData, isRootFolder) {\n      var _this2 = this;\n\n      if (!noteData.titleLabel) {\n        console.warn('Can not add Note to the Aside because it has no title', noteData);\n        return;\n      }\n\n      var notesMenu = void 0;\n\n      if (isRootFolder) {\n        notesMenu = document.querySelector('[name=\"js-notes-menu\"]');\n      } else if (this.currentFolder && noteData.folderId === this.currentFolder._id) {\n        notesMenu = document.querySelector('[name=\"js-folder-notes-menu\"]');\n      } else {\n        console.log('Note added to closed folder: %o', noteData.folderId);\n        return;\n      }\n\n      /**\n       * If we already have this item, update title\n       */\n      var existingNote = notesMenu.querySelector('[data-id=\"' + noteData._id + '\"]');\n\n      if (existingNote) {\n        existingNote.textContent = this.createMenuItemTitle(noteData.titleLabel);\n\n        /**\n         * Set unread badge because Note was updated\n         */\n        this.checkUnreadStatus(noteData._id);\n        return;\n      }\n\n      var item = this.makeMenuItem(noteData.titleLabel, { id: noteData._id });\n\n      notesMenu.insertAdjacentElement('afterbegin', item);\n\n      item.addEventListener('click', function (event) {\n        return _this2.menuItemClicked(event);\n      });\n    }\n\n    /**\n     * Add new item to the folders list\n     *\n     * @param {object} folder\n     * @param {string} folder.title\n     * @param {number} folder._id\n     */\n\n  }, {\n    key: 'addFolder',\n    value: function addFolder(folder) {\n      var _this3 = this;\n\n      if (!folder.title) {\n        console.warn('Can not add Folder to the Aside because it has no title', folder);\n        return;\n      }\n      var foldersMenu = document.querySelector('[name=\"js-folders-menu\"]');\n      var folderItem = foldersMenu.querySelector('[data-folder-id=\"' + folder._id + '\"]');\n\n      if (folderItem) {\n        this.updateFolderTitleInMenu(folder._id, folder.title);\n        return;\n      }\n\n      var item = this.makeMenuItem(folder.title, { folderId: folder._id });\n\n      foldersMenu.insertAdjacentElement('afterbegin', item);\n\n      item.addEventListener('click', function (event) {\n        return _this3.folderClicked(event.target);\n      });\n    }\n\n    /**\n     * Makes aside menu item\n     * @param  {String} title   - item title\n     * @param  {object} dataset - data to store in dataset\n     * @return {Element}\n     */\n\n  }, {\n    key: 'makeMenuItem',\n    value: function makeMenuItem(title, dataset) {\n      title = this.createMenuItemTitle(title);\n\n      var item = $.make('li', Aside.CSS.noteListItem, {\n        textContent: title\n      });\n\n      for (var key in dataset) {\n        item.dataset[key] = dataset[key];\n      }\n\n      return item;\n    }\n\n    /**\n     * Creates aside menu item title\n     * @param {String} title\n     * @return {String}\n     */\n\n  }, {\n    key: 'createMenuItemTitle',\n    value: function createMenuItemTitle(title) {\n      if (title.length > menuItemTitleMaxLength) {\n        title = title.substring(0, menuItemTitleMaxLength) + '…';\n      }\n\n      return title;\n    }\n\n    /**\n     * Remove item from menu\n     *\n     * @param itemId\n     */\n\n  }, {\n    key: 'removeMenuItem',\n    value: function removeMenuItem(itemId) {\n      var notesMenu = document.querySelectorAll('[name=\"js-notes-menu\"], [name=\"js-folder-notes-menu\"]');\n\n      notesMenu.forEach(function (menu) {\n        var existingNote = menu.querySelector('[data-id=\"' + itemId + '\"]');\n\n        if (existingNote) existingNote.remove();\n      });\n    }\n\n    /**\n     * Remove folder from menu by ID\n     * @param folderId - folder ID\n     */\n\n  }, {\n    key: 'removeFolderFromMenu',\n    value: function removeFolderFromMenu(folderId) {\n      var foldersMenu = document.querySelector('[name=\"js-folders-menu\"]');\n\n      if (!foldersMenu) {\n        return false;\n      }\n\n      var folderItem = foldersMenu.querySelector('[data-folder-id=\"' + folderId + '\"]');\n\n      if (folderItem) {\n        folderItem.remove();\n      }\n    }\n\n    /**\n     * Updates Folder's title in menu\n     *\n     * @param {MongoId} folderId - folder ID\n     * @param {String} title     - new title\n     */\n\n  }, {\n    key: 'updateFolderTitleInMenu',\n    value: function updateFolderTitleInMenu(folderId, title) {\n      var foldersMenu = document.querySelector('[name=\"js-folders-menu\"]');\n\n      if (!foldersMenu) {\n        return false;\n      }\n\n      var folderItem = foldersMenu.querySelector('[data-folder-id=\"' + folderId + '\"]');\n\n      if (folderItem) {\n        folderItem.textContent = title;\n      }\n    }\n\n    /**\n     * Note in aside menu click listener\n     * @param {MouseEvent} event\n     */\n\n  }, {\n    key: 'menuItemClicked',\n    value: function menuItemClicked(event) {\n      var menuItem = event.target,\n          id = menuItem.dataset.id;\n\n      var noteData = window.ipcRenderer.sendSync('note - get', { id: id });\n\n      codex.notes.note.render(noteData);\n\n      /**\n       * Remove unread badge\n       */\n      this.markNoteAsRead(id);\n    }\n\n    /**\n     * Fired after swipe-right\n     */\n\n  }, {\n    key: 'folderOpened',\n    value: function folderOpened() {\n      /**\n       * Restore current folder after closing\n       */\n      if (!this.currentFolder && this.previouslyOpenedFolder) {\n        this.currentFolder = new _folder2.default(this.previouslyOpenedFolder);\n      }\n\n      console.assert(this.currentFolder, 'Folder opened but does not initialized');\n\n      codex.notes.note.clear();\n    }\n\n    /**\n     * Fired after swipe-left\n     */\n\n  }, {\n    key: 'folderClosed',\n    value: function folderClosed() {\n      if (this.currentFolder) {\n        this.previouslyOpenedFolder = this.currentFolder.id;\n      }\n\n      this.currentFolder = null;\n      this.folderSettings.close();\n    }\n\n    /**\n     * Folder menu item clicked handler\n     * @param {Element} item - clicked folder button\n     */\n\n  }, {\n    key: 'folderClicked',\n    value: function folderClicked(item) {\n      var folderId = item.dataset.folderId;\n\n      /**\n       * Load folder\n       */\n      this.currentFolder = new _folder2.default(folderId, item.textContent);\n\n      /**\n       * Open folder section\n       */\n      this.swiper.open();\n    }\n\n    /**\n     * Closes opened folder\n     */\n\n  }, {\n    key: 'closeFolder',\n    value: function closeFolder() {\n      this.swiper.close();\n    }\n\n    /**\n     * Shows fade-out gradient at the top of scrollable zone\n     * Uses by scroll to prevent overlaying first block (NOTES, FOLDERS headings) with gradient when block is not scrolled\n     */\n\n  }, {\n    key: 'activateScrollableGradient',\n    value: function activateScrollableGradient() {\n      /**\n       * Scroll top offset to show gradient\n       * @type {Number}\n       */\n      var minimumDistance = 5;\n\n      /**\n       * Modificatior that will be added to the wrapper on scroll\n       * @type {String}\n       */\n      var scrolledModificator = 'aside__scrollable--scrolled';\n\n      /**\n       * Scrollable zoners\n       * @type {Element[]}\n       */\n      var scrollableZones = document.querySelectorAll('[name=\"js-scrollable\"]');\n\n      var addClassOnScroll = function addClassOnScroll(event) {\n        var scrollableContent = event.target,\n            scrollableWrapper = event.target.parentNode;\n\n        if (scrollableContent.scrollTop > minimumDistance) {\n          scrollableWrapper.classList.add(scrolledModificator);\n        } else {\n          scrollableWrapper.classList.remove(scrolledModificator);\n        }\n      };\n\n      scrollableZones.forEach(function (zone) {\n        zone.addEventListener('scroll', addClassOnScroll);\n      });\n    }\n\n    /**\n     * Check unread status of passed Notes Ids\n     * @param {String[]|String} noteIds - ids of Notes to check\n     */\n\n  }, {\n    key: 'checkUnreadStatus',\n    value: function checkUnreadStatus(noteIds) {\n      var _this4 = this;\n\n      if (!Array.isArray(noteIds)) {\n        /**\n         * If only singe id passed\n         */\n        if (noteIds) {\n          noteIds = [noteIds];\n        } else {\n          return;\n        }\n      }\n\n      /**\n       * Request unrad states of passed note ids\n       */\n      window.ipcRenderer.send('notes - get unread states', { noteIds: noteIds });\n\n      /**\n       * We use \"once\" to invoke sa callback to automatically removes listener after folder will be closed\n       */\n      window.ipcRenderer.once('notes - set unread state',\n\n      /**\n       * Check unread state of Notes from the current Folder\n       * @param  {*} event\n       * @param  {Object} unreadStates - map of note ids with unread states {dqO9tu5vY2aSC582: true, ...}\n       */\n      function (event) {\n        var unreadStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        for (var noteId in unreadStates) {\n          var noteUnread = unreadStates[noteId];\n\n          if (noteUnread) {\n            _this4.markNoteAsUnread(noteId);\n          }\n        }\n      });\n    }\n\n    /**\n     * Remove unread badge from the Note in Aside\n     * @param  {string} noteId - Note's id\n     */\n\n  }, {\n    key: 'markNoteAsRead',\n    value: function markNoteAsRead(noteId) {\n      var noteInAside = document.querySelector('[name=\"js-notes-menu\"] [data-id=\"' + noteId + '\"], [name=\"js-folder-notes-menu\"] [data-id=\"' + noteId + '\"]');\n\n      if (noteInAside) {\n        noteInAside.classList.remove(Aside.CSS.notSeenState);\n      }\n    }\n\n    /**\n     * Mark Note at the Aside as unread\n     * @param {string} noteId\n     */\n\n  }, {\n    key: 'markNoteAsUnread',\n    value: function markNoteAsUnread(noteId) {\n      var noteInAside = document.querySelector('[name=\"js-notes-menu\"] [data-id=\"' + noteId + '\"], [name=\"js-folder-notes-menu\"] [data-id=\"' + noteId + '\"]');\n\n      if (noteInAside) {\n        noteInAside.classList.add(Aside.CSS.notSeenState);\n      }\n    }\n\n    /**\n     * Show \"restart to update\" button\n     */\n\n  }, {\n    key: 'showUpdateAppButton',\n    value: function showUpdateAppButton() {\n      var idShowButton = 'update-app-button';\n      var classShowButton = 'update-notification--showed';\n\n      /**\n       * Update app button\n       */\n      var updateAppButton = document.getElementById(idShowButton);\n\n      /**\n       * Return null if element was not found\n       */\n      if (!updateAppButton) {\n        console.log('Can not get updateAppButton');\n        return;\n      }\n\n      /**\n       * Add click listener\n       */\n      updateAppButton.addEventListener('click', function () {\n        updateAppButton.classList.remove(classShowButton);\n        window.ipcRenderer.send('quit and install update');\n      });\n\n      /**\n       * Show button\n       */\n      updateAppButton.classList.add(classShowButton);\n    }\n  }]);\n\n  return Aside;\n}();\n\nexports.default = Aside;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/aside.js?");

/***/ }),

/***/ "./public/javascripts/auth-observer.js":
/*!*********************************************!*\
  !*** ./public/javascripts/auth-observer.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class AuthObserver\n * @classdesc Store user's auth state\n *\n * Class uses to observe user`s auth state\n *\n * @usage\n * const authObserver = new AuthObserver();\n * authObserver.login(userData);\n *\n * authObserver.loggedIn === true\n */\nvar AuthObserver = function () {\n  /**\n   * @constructor\n   *\n   * @param onLogin - callback to fire when user is logged in\n   * @param onLogout - callback to fire when user is logged out\n   */\n  function AuthObserver(_ref) {\n    var _ref$onLogin = _ref.onLogin,\n        onLogin = _ref$onLogin === undefined ? function () {} : _ref$onLogin,\n        _ref$onLogout = _ref.onLogout,\n        onLogout = _ref$onLogout === undefined ? function () {} : _ref$onLogout,\n        _ref$user = _ref.user,\n        user = _ref$user === undefined ? null : _ref$user;\n\n    _classCallCheck(this, AuthObserver);\n\n    this.user = user;\n    this._loggedIn = false;\n    this.onLogin = onLogin;\n    this.onLogout = onLogout;\n\n    if (this.user) {\n      this.login(this.user);\n    }\n  }\n\n  /**\n   * Store logged in user state.\n   * Fires onLogin callback\n   *\n   * @param {Object} user - logged user\n   */\n\n\n  _createClass(AuthObserver, [{\n    key: \"login\",\n    value: function login(user) {\n      if (!user.token) return;\n\n      this.user = user;\n      this._loggedIn = true;\n      this.onLogin(user);\n    }\n\n    /**\n     * Store logged out user state.\n     * Fires onLogout callback\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this._loggedIn = false;\n      this.onLogout(this.user);\n      this.user = null;\n    }\n\n    /**\n     * Get current login state\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"loggedIn\",\n    get: function get() {\n      return this._loggedIn;\n    }\n  }]);\n\n  return AuthObserver;\n}();\n\nexports.default = AuthObserver;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/auth-observer.js?");

/***/ }),

/***/ "./public/javascripts/autoresizer.js":
/*!*******************************************!*\
  !*** ./public/javascripts/autoresizer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Autoresizer module\n * Expands dynamically height of textareas\n */\n\n/**\n * @property elements - array of elements\n * @property {Function} addResizer - adds listeners\n * @property {Function} removeResizer - removes listeners\n * @property {Function} destroy - removes all elements and handlers\n */\nvar Autoresizer = function () {\n  /**\n   * adds autoresize handler\n   * @param elements - elements that needs to expand\n   */\n  function Autoresizer(elements) {\n    _classCallCheck(this, Autoresizer);\n\n    this.elements = elements || [];\n\n    for (var i = 0; i < this.elements.length; i++) {\n      this.addResizer(this.elements[i]);\n    }\n  }\n\n  /**\n   * autoresizer for textareas\n   * @param {Element} el - element we want to expand\n   */\n\n\n  _createClass(Autoresizer, [{\n    key: 'addResizer',\n    value: function addResizer(el) {\n      if (el.value.trim()) {\n        el.style.height = el.scrollHeight + 'px';\n      } else {\n        el.style.height = 'auto';\n      }\n\n      el.addEventListener('keydown', this.enterKeyPressed, false);\n      el.addEventListener('input', this.resize.bind(this, el), false);\n    }\n\n    /**\n     * Prevent enter key pressing\n     * @param event\n     */\n\n  }, {\n    key: 'enterKeyPressed',\n    value: function enterKeyPressed(event) {\n      if (event.keyCode === 13) {\n        event.preventDefault();\n      }\n    }\n\n    /**\n     * Resize input\n     * @param el\n     */\n\n  }, {\n    key: 'resize',\n    value: function resize(el) {\n      el.style.height = 'auto';\n      el.style.height = el.scrollHeight + 'px';\n    }\n\n    /**\n     * removes handlers from element\n     * @param {Element} el - element we want to clear from resizer\n     */\n\n  }, {\n    key: 'removeResizer',\n    value: function removeResizer(el) {\n      el.removeEventListener('keydown', this.enterKeyPressed);\n      el.removeEventListener('input', this.resize);\n    }\n\n    /**\n     * Destroyer function. Clears all elements\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      for (var i = 0; i < this.elements.length; i++) {\n        this.removeResizer(this.elements[i]);\n        this.elements[i].style.height = 'auto';\n      }\n\n      this.elements = [];\n    }\n  }]);\n\n  return Autoresizer;\n}();\n\nexports.default = Autoresizer;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/autoresizer.js?");

/***/ }),

/***/ "./public/javascripts/connection-observer.js":
/*!***************************************************!*\
  !*** ./public/javascripts/connection-observer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @module ConnectionObserver\n *\n * Detects Online and Offline statuses and update state in the Aside\n *\n * @typedef {ConnectionObserver} ConnectionObserver\n */\nvar ConnectionObserver = function () {\n  /**\n   * @constructor\n   */\n  function ConnectionObserver() {\n    var _this = this;\n\n    _classCallCheck(this, ConnectionObserver);\n\n    if (window.navigator.onLine) {\n      this.online();\n    } else {\n      this.offline();\n    }\n\n    window.addEventListener('online', function () {\n      _this.online();\n    });\n    window.addEventListener('offline', function () {\n      _this.offline();\n    });\n  }\n\n  /**\n   * Fired when the Application goes Online\n   */\n\n\n  _createClass(ConnectionObserver, [{\n    key: 'online',\n    value: function online() {\n      codex.notes.statusBar.text = 'Syncing';\n      codex.notes.statusBar.loading = true;\n\n      this.sync().then(function () {\n        codex.notes.statusBar.text = 'All saved';\n        codex.notes.statusBar.loading = false;\n      });\n    }\n\n    /**\n     * Send sync event\n     * @return {Promise<Object>} - updates from the Cloud\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      return new Promise(function (resolve) {\n        console.time('Syncing...');\n        window.ipcRenderer.send('user - sync');\n        window.ipcRenderer.once('sync finished', function (event, returnedData) {\n          console.timeEnd('Syncing...');\n          resolve(returnedData);\n        });\n      });\n    }\n\n    /**\n     * Fired when the Application goes Offline\n     */\n\n  }, {\n    key: 'offline',\n    value: function offline() {\n      codex.notes.statusBar.text = 'Offline';\n\n      this.reconnect();\n    }\n\n    /**\n     * Start reconnection process\n     */\n\n  }, {\n    key: 'reconnect',\n    value: function reconnect() {\n      codex.notes.statusBar.text = 'Reconnection';\n      codex.notes.statusBar.loading = true;\n    }\n  }]);\n\n  return ConnectionObserver;\n}();\n\nexports.default = ConnectionObserver;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/connection-observer.js?");

/***/ }),

/***/ "./public/javascripts/dialog.js":
/*!**************************************!*\
  !*** ./public/javascripts/dialog.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar remote = __webpack_require__(/*! electron */ \"electron\").remote;\n\n/**\n *\n */\n\nvar Dialog = function () {\n  /**\n   *\n   */\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n  }\n\n  _createClass(Dialog, null, [{\n    key: 'confirm',\n\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    value: function confirm(text) {\n      var browserWindow = remote.getCurrentWindow();\n\n      browserWindow.setSheetOffset(30, browserWindow.width / 2);\n\n      var choice = remote.dialog.showMessageBox(browserWindow, {\n        type: 'question',\n        buttons: ['Yes', 'No'],\n        title: 'Confirm',\n        message: text\n      });\n\n      if (choice === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Shows error notification\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'error',\n    value: function error(text) {\n      var browserWindow = remote.getCurrentWindow();\n\n      browserWindow.setSheetOffset(30, browserWindow.width / 2);\n\n      remote.dialog.showMessageBox(browserWindow, {\n        type: 'error',\n        title: 'Wow. Something goes wrong.',\n        message: text\n      });\n    }\n  }]);\n\n  return Dialog;\n}();\n\nexports.default = Dialog;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/dialog.js?");

/***/ }),

/***/ "./public/javascripts/dom.js":
/*!***********************************!*\
  !*** ./public/javascripts/dom.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * DOM manipulations methods\n */\nvar DOM = function () {\n  function DOM() {\n    _classCallCheck(this, DOM);\n  }\n\n  _createClass(DOM, null, [{\n    key: 'make',\n\n    /**\n     * Helper for making Elements with classname and attributes\n     * @param  {string} tagName           - new Element tag name\n     * @param  {array|string} classNames  - list or name of CSS classname(s)\n     * @param  {Object} attributes        - any attributes\n     * @return {Element}\n     */\n    value: function make(tagName, classNames, attributes) {\n      var el = document.createElement(tagName);\n\n      if (Array.isArray(classNames)) {\n        var _el$classList;\n\n        (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(classNames));\n      } else if (classNames) {\n        el.classList.add(classNames);\n      }\n\n      for (var attrName in attributes) {\n        el[attrName] = attributes[attrName];\n      }\n\n      return el;\n    }\n\n    /**\n     * Append one or several elements to the parent\n     *\n     * @param  {Element} parent    - where to append\n     * @param  {Element|Element[]} - element ore elements list\n     */\n\n  }, {\n    key: 'append',\n    value: function append(parent, elements) {\n      if (Array.isArray(elements)) {\n        elements.forEach(function (el) {\n          return parent.appendChild(el);\n        });\n      } else {\n        parent.appendChild(elements);\n      }\n    }\n\n    /**\n     /**\n    * Replaces node with\n    * @param {Element} nodeToReplace\n    * @param {Element} replaceWith\n    */\n\n  }, {\n    key: 'replace',\n    value: function replace(nodeToReplace, replaceWith) {\n      return nodeToReplace.parentNode.replaceChild(replaceWith, nodeToReplace);\n    }\n\n    /**\n    * getElementById alias\n    * @param {String} elementId\n    */\n\n  }, {\n    key: 'get',\n    value: function get(elementId) {\n      return document.getElementById(elementId);\n    }\n\n    /**\n    * Loads static resourse: CSS or JS\n    * @param {string} type  - CSS|JS\n    * @param {string} path  - resource path\n    * @param {string} inctanceName - unique name of resource\n    * @return Promise\n    */\n\n  }, {\n    key: 'loadResource',\n    value: function loadResource(type, path, instanceName) {\n      /**\n       * Imported resource ID prefix\n       * @type {String}\n       */\n      var resourcePrefix = 'cdx-resourse';\n\n      return new Promise(function (resolve, reject) {\n        if (!type || !['JS', 'CSS'].includes(type)) {\n          reject('Unexpected resource type passed. \\xABCSS\\xBB or \\xABJS\\xBB expected, \\xAB' + type + '\\xBB passed');\n        }\n\n        var node = void 0;\n\n        /** Script is already loaded */\n        if (!instanceName) {\n          reject('Instance name is missed');\n        } else if (document.getElementById(resourcePrefix + '-' + type.toLowerCase() + '-' + instanceName)) {\n          resolve(path);\n        }\n\n        if (type === 'JS') {\n          node = document.createElement('script');\n          node.async = true;\n          node.defer = true;\n          node.charset = 'utf-8';\n        } else {\n          node = document.createElement('link');\n          node.rel = 'stylesheet';\n        }\n\n        node.id = resourcePrefix + '-' + type.toLowerCase() + '-' + instanceName;\n\n        var timerLabel = 'Resource loading ' + type + ' ' + instanceName;\n\n        console.time(timerLabel);\n\n        node.onload = function () {\n          console.timeEnd(timerLabel);\n          resolve(path);\n        };\n\n        node.onerror = function () {\n          console.timeEnd(timerLabel);\n          reject(path);\n        };\n\n        if (type === 'JS') {\n          node.src = path;\n        } else {\n          node.href = path;\n        }\n\n        document.head.appendChild(node);\n      });\n    }\n\n    /**\n     * Inserts one element after another\n     * @param  {Element} newNode\n     * @param  {Element} referenceNode\n     */\n\n  }, {\n    key: 'after',\n    value: function after(newNode, referenceNode) {\n      referenceNode.insertAdjacentElement('afterEnd', newNode);\n    }\n  }]);\n\n  return DOM;\n}();\n\nexports.default = DOM;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/dom.js?");

/***/ }),

/***/ "./public/javascripts/editor.js":
/*!**************************************!*\
  !*** ./public/javascripts/editor.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar $ = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\").default;\nvar common = __webpack_require__(/*! ./utils/common */ \"./public/javascripts/utils/common.js\").default;\n\n/**\n * CodeX Editor module\n */\n\nvar Editor = function () {\n  /**\n  * @constructor\n  * @property {String}  path          - CodeX Editor library path\n  * @property {Array}   plugins       - plugins names\n  * @property {TimerId} autosaveTimer - autosave debounce timer\n  */\n  function Editor() {\n    var _this = this;\n\n    _classCallCheck(this, Editor);\n\n    /**\n     * Path to Editor sources dir\n     */\n    this.path = '../../public/codex.editor/';\n\n    /**\n     * List of plugins\n     */\n    this.plugins = ['text', 'header'];\n\n    /**\n     * List of inline-tools\n     */\n    this.inlineTools = ['term'];\n\n    /**\n     * Element to be wrapper for an Editor\n     */\n    this.editorZoneId = 'codex-editor';\n\n    /**\n     * Editor's instance\n     */\n    this.instance = null;\n\n    this.loadEditor().then(function () {\n      return _this.loadPlugins();\n    }).then(function () {\n      return _this.init();\n    });\n  }\n\n  /**\n   * Loads CodeX Editor sources\n   * @return {Promise}\n   */\n\n\n  _createClass(Editor, [{\n    key: 'loadEditor',\n    value: function loadEditor() {\n      return $.loadResource('JS', this.path + 'build/codex-editor.js', 'codex-editor');\n    }\n\n    /**\n     * Loads CodeX Editor plugins\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'loadPlugins',\n    value: function loadPlugins() {\n      var _this2 = this;\n\n      var pluginsQuery = [];\n\n      /**\n       * Load plugins\n       */\n      this.plugins.forEach(function (name) {\n        pluginsQuery.push.apply(pluginsQuery, [$.loadResource('JS', _this2.path + 'example/plugins/' + name + '/' + name + '.js', name), $.loadResource('CSS', _this2.path + 'example/plugins/' + name + '/' + name + '.css', name)]);\n      });\n\n      /**\n       * Load inline-tools\n       */\n      this.inlineTools.forEach(function (name) {\n        pluginsQuery.push.apply(pluginsQuery, [$.loadResource('JS', _this2.path + 'example/tools-inline/' + name + '/' + name + '.js', name), $.loadResource('CSS', _this2.path + 'example/tools-inline/' + name + '/' + name + '.css', name)]);\n      });\n\n      return Promise.all(pluginsQuery).catch(function (err) {\n        return console.warn('Cannot load plugin: ', err);\n      }).then(function () {\n        return console.log('Plugins loaded');\n      });\n    }\n\n    /**\n     * Init CodeX Editor\n     * @return {[type]} [description]\n     */\n\n  }, {\n    key: 'init',\n    value: function init() {\n      var _this3 = this;\n\n      this.instance = new CodexEditor({\n        holderId: this.editorZoneId,\n        initialBlock: 'paragraph',\n        placeholder: 'Your story',\n        tools: {\n          paragraph: Text,\n          header: Header,\n          term: Term\n        },\n        toolsConfig: {\n          paragraph: {\n            inlineToolbar: true\n          }\n        },\n        data: {\n          items: []\n        }\n      });\n\n      /**\n       * Wait some time and init autosave function\n       */\n      window.setTimeout(function () {\n        /**\n         * Create a wrapper with debouncing for codex.notes.note.save()\n         *\n         * @type {Function|*}\n         */\n        _this3.saveNoteDebouncedFunction = common.debounce(function () {\n          codex.notes.note.save();\n        }, 500);\n\n        _this3.enableAutosave();\n      }, 500);\n    }\n\n    /**\n     * Add keyup listener to editor zone\n     */\n\n  }, {\n    key: 'enableAutosave',\n    value: function enableAutosave() {\n      var noteTitle = document.getElementById('note-title'),\n          editorZone = document.getElementById(this.editorZoneId);\n\n      noteTitle.addEventListener('keyup', this.saveNoteDebouncedFunction);\n      editorZone.addEventListener('keyup', this.saveNoteDebouncedFunction);\n    }\n\n    /**\n     * Remove keyup listener to editor zone\n     */\n\n  }, {\n    key: 'disableAutosave',\n    value: function disableAutosave() {\n      var noteTitle = document.getElementById('note-title'),\n          editorZone = document.getElementById(this.editorZoneId);\n\n      noteTitle.removeEventListener('keyup', this.saveNoteDebouncedFunction);\n      editorZone.removeEventListener('keyup', this.saveNoteDebouncedFunction);\n    }\n  }]);\n\n  return Editor;\n}();\n\nexports.default = Editor;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/editor.js?");

/***/ }),

/***/ "./public/javascripts/folder-settings.js":
/*!***********************************************!*\
  !*** ./public/javascripts/folder-settings.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Dialog = __webpack_require__(/*! ./dialog */ \"./public/javascripts/dialog.js\").default;\nvar $ = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\").default;\nvar Validate = __webpack_require__(/*! ./utils/validate */ \"./public/javascripts/utils/validate.js\").default;\n\n/**\n * Folder Settings panel module\n *\n * @property {Boolean} opened - state\n */\n\nvar FolderSettings = function () {\n  /**\n   * @constructor\n   */\n  function FolderSettings() {\n    var _this = this;\n\n    _classCallCheck(this, FolderSettings);\n\n    this.toggler = $.get('js-folder-settings-toggler');\n    this.closeButton = $.get('js-close-folder');\n    this.removeFolderButton = $.get('js-delete-folder');\n    this.folderTitleInput = document.getElementsByName('folder-title')[0];\n    this.newMemberInput = $.get('folder-new-member-input');\n    this.loginButton = $.get('folder-login-button');\n    this.membersList = $.get('js-members-list');\n\n    this.toggler.addEventListener('click', function () {\n      _this.toggle();\n    });\n\n    this.closeButton.addEventListener('click', function () {\n      _this.close();\n    });\n\n    this.removeFolderButton.addEventListener('click', function () {\n      _this.removeFolderClicked();\n    });\n\n    this.folderTitleInput.addEventListener('keydown', function (event) {\n      return _this.changeTitleKeydown(event);\n    });\n    this.newMemberInput.addEventListener('keydown', function (event) {\n      return _this.inviteMemberKeydown(event);\n    });\n    this.loginButton.addEventListener('click', function () {\n      codex.notes.user.showAuth();\n    });\n\n    window.ipcRenderer.on('folder - add collaborator', function (event, collaborator) {\n      if (codex.notes.aside.currentFolder.id === collaborator.folderId) {\n        _this.addCollaborator(collaborator);\n      }\n    });\n  }\n\n  /**\n   * CSS dictionary\n   */\n\n\n  _createClass(FolderSettings, [{\n    key: 'open',\n\n\n    /**\n     * Open panel and change state\n     */\n    value: function open() {\n      document.body.classList.add(FolderSettings.CSS.panelOpenedModifier);\n      this.opened = true;\n\n      /**\n       * Fill Folder's title input\n       */\n      this.folderTitleInput.value = codex.notes.aside.currentFolder.title || '';\n    }\n\n    /**\n     * Close panel and change state\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      document.body.classList.remove(FolderSettings.CSS.panelOpenedModifier);\n      this.opened = false;\n    }\n\n    /**\n     * Shows/hide this.panel\n     */\n\n  }, {\n    key: 'toggle',\n    value: function toggle() {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * Handler for Remove Folder Button\n     */\n\n  }, {\n    key: 'removeFolderClicked',\n    value: function removeFolderClicked() {\n      console.assert(codex.notes.aside.currentFolder, 'Cannot remove Folder because it is not open');\n\n      var result = codex.notes.aside.currentFolder.delete();\n\n      if (result) {\n        this.close();\n        codex.notes.aside.closeFolder();\n      }\n    }\n\n    /**\n     * Handler for Change Title input\n     * @param  {KeyboardEvent} event - keydowns\n     */\n\n  }, {\n    key: 'changeTitleKeydown',\n    value: function changeTitleKeydown(event) {\n      if (event.key !== 'Enter') {\n        return;\n      }\n\n      var input = event.target,\n          title = input.value.trim(),\n          id = codex.notes.aside.currentFolder._id;\n\n      if (!title) {\n        return;\n      }\n\n      /**\n       * Send request for renaming\n       * @type {object}\n       */\n      var result = window.ipcRenderer.sendSync('folder - change title', { id: id, title: title });\n\n      if (!result) {\n        Dialog.error('Folder renaming failed. Please, try again.');\n        return false;\n      }\n\n      /**\n       * Update title in the:\n       *  - folder header\n       *  - aside menu\n       */\n      codex.notes.aside.currentFolder.title = title;\n\n      /**\n       * Close folder settings\n       */\n      this.close();\n    }\n\n    /**\n     * Handler for New Member input\n     * @param {KeyboardEvent} event - keydowns\n     */\n\n  }, {\n    key: 'inviteMemberKeydown',\n    value: function inviteMemberKeydown(event) {\n      if (event.key !== 'Enter') {\n        return;\n      }\n\n      var input = event.target,\n          fieldset = input.parentNode,\n          email = input.value.trim(),\n          id = codex.notes.aside.currentFolder._id;\n\n      if (!email || !Validate.email(email)) {\n        fieldset.classList.add(FolderSettings.CSS.wobble);\n        window.setTimeout(function () {\n          fieldset.classList.remove(FolderSettings.CSS.wobble);\n        }, 100);\n\n        return;\n      }\n\n      /**\n       * Send request for adding new collaborator\n       * @type {object}\n       */\n      var result = window.ipcRenderer.sendSync('folder - collaborator add', { id: id, email: email });\n\n      // Clear input field\n      input.value = '';\n\n      if (!result.success) {\n        Dialog.error(result.message || 'Error while adding a collaborator to the folder');\n        return false;\n      }\n\n      // this.addCollaborator({email});\n    }\n\n    /**\n     * Add Collaborators to folder-settings panel\n     *\n     * @param {Array} collaborators\n     */\n\n  }, {\n    key: 'showCollaborators',\n    value: function showCollaborators(collaborators) {\n      var _this2 = this;\n\n      this.membersList.innerHTML = '';\n\n      collaborators.forEach(function (collaborator) {\n        _this2.addCollaborator(collaborator);\n      });\n    }\n\n    /**\n     * Add Collaborator to the Collaborators list at folder-settings panel\n     *\n     * @param {String|null} collaborator.user.photo\n     * @param {String} collaborator.email\n     */\n\n  }, {\n    key: 'addCollaborator',\n    value: function addCollaborator(collaborator) {\n      var newMemberItem = $.make('LI', ['member-list__item'], {}),\n          ava = void 0,\n          memberEmailClasses = ['member-list__item-name'];\n\n      if (collaborator.user && collaborator.user.photo) {\n        /** Add User's photo */\n        ava = $.make('IMG', ['member-list__item-photo', 'member-list__item-photo--circled'], {\n          src: collaborator.user.photo\n        });\n      } else {\n        /** Add envelope icon */\n        ava = $.make('IMG', ['member-list__item-photo'], {\n          src: '../../public/svg/envelope.svg'\n        });\n\n        memberEmailClasses.push('member-list__item--waiting');\n      }\n\n      /** Add ava block */\n      $.append(newMemberItem, ava);\n\n      var emailWrapper = $.make('div', 'member-list__item-name-wrapper');\n\n      /** Create block with User's email */\n      var newMemberEmail = $.make('SPAN', memberEmailClasses, {\n        innerHTML: collaborator.email\n      });\n\n      /**\n       * If email is longer that this count, it will be overflowed\n       * @type {number}\n       */\n      var visibleCharsCount = 23;\n\n      /**\n       * Add class for elements with long email for the overflow animation\n       */\n      if (collaborator.email.length > visibleCharsCount) {\n        emailWrapper.classList.add('member-list__item-name-wrapper--scrollable');\n      }\n\n      $.append(emailWrapper, newMemberEmail);\n      $.append(newMemberItem, emailWrapper);\n\n      /**\n       * Add new row\n       */\n      $.append(this.membersList, newMemberItem);\n    }\n\n    /**\n     * Toggle visibility of login button and new collaborator input\n     */\n\n  }, {\n    key: 'toggleCollaboratorInput',\n    value: function toggleCollaboratorInput() {\n      if (codex.notes.authObserver.loggedIn) {\n        this.loginButton.classList.add('hide');\n        this.newMemberInput.classList.remove('hide');\n        return;\n      }\n\n      this.loginButton.classList.remove('hide');\n      this.newMemberInput.classList.add('hide');\n    }\n  }], [{\n    key: 'CSS',\n    get: function get() {\n      return {\n        panelOpenedModifier: 'folder-settings-opened',\n        wobble: 'wobble'\n      };\n    }\n  }]);\n\n  return FolderSettings;\n}();\n\nexports.default = FolderSettings;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/folder-settings.js?");

/***/ }),

/***/ "./public/javascripts/folder.js":
/*!**************************************!*\
  !*** ./public/javascripts/folder.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar $ = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\").default;\nvar Dialog = __webpack_require__(/*! ./dialog */ \"./public/javascripts/dialog.js\").default;\n\n/**\n * Folders methods\n *\n * @typedef {Folder} Folder\n * @property {Number}    id                 - Folder's id\n * @property {string}    title              - Folder's title\n * @property {Array}     notes              - Notes list\n * @property {Array}     collaborators      - Collaborators list\n * @property {Element}   notesListWrapper   - Notes list holder\n */\n\nvar Folder = function () {\n  /**\n   * Folder methods\n   *\n   * @param {Number} id     - Folder's id\n   * @param {string} title  - Folder's title\n   */\n  function Folder(id, title) {\n    var _this = this;\n\n    _classCallCheck(this, Folder);\n\n    this._id = id;\n    this._title = title;\n\n    this.folderTitleElement = $.get('js-folder-title');\n\n    /**\n     * Load actual Folder's data\n     * @type {Object}\n     */\n    var folderData = window.ipcRenderer.sendSync('folder - get', this._id);\n\n    this.title = folderData.title;\n\n    window.ipcRenderer.send('folder - get collaborators', { folder: this.id });\n    window.ipcRenderer.once('folder - collaborators list', function (event, _ref) {\n      var collaborators = _ref.collaborators;\n\n      _this.collaborators = collaborators;\n      codex.notes.aside.folderSettings.showCollaborators(_this.collaborators);\n    });\n\n    this.notesListWrapper = document.querySelector('[name=\"js-folder-notes-menu\"]');\n\n    /**\n     * @todo asynchronous notes load\n     */\n    codex.notes.aside.loadNotes(id).then(function (_ref2) {\n      var notes = _ref2.notes;\n\n      _this.notes = notes;\n      _this.setNoteSeenStatus();\n    }).then(function () {\n      return _this.clearNotesList();\n    });\n  }\n\n  /**\n   * Folder id getter\n   */\n\n\n  _createClass(Folder, [{\n    key: 'fillHeader',\n\n\n    /**\n     * Fills folder header block\n     */\n    value: function fillHeader() {\n      this.folderTitleElement.textContent = this._title;\n    }\n\n    /**\n     * Clear list if there is no one note\n     */\n\n  }, {\n    key: 'clearNotesList',\n    value: function clearNotesList() {\n      this.notesListWrapper.innerHTML = '';\n    }\n\n    /**\n     * Delete folder\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      if (Dialog.confirm('Are you sure you want to delete this folder?')) {\n        if (window.ipcRenderer.sendSync('folder - delete', this._id)) {\n          codex.notes.aside.removeFolderFromMenu(this._id);\n          codex.notes.note.clear();\n          return true;\n        }\n      }\n      Dialog.error('Folder removing failed');\n      return false;\n    }\n\n    /**\n     * Checks note last seen time.\n     * if note modification time is greater, then add badge\n     */\n\n  }, {\n    key: 'setNoteSeenStatus',\n    value: function setNoteSeenStatus() {\n      var noteIds = this.notes.map(function (note) {\n        return note._id;\n      });\n\n      /**\n       * Check unread status of Notes in the Folder\n       */\n      codex.notes.aside.checkUnreadStatus(noteIds);\n    }\n  }, {\n    key: 'id',\n    get: function get() {\n      return this._id;\n    }\n\n    /**\n     * Folder title getter\n     */\n\n  }, {\n    key: 'title',\n    get: function get() {\n      return this._title;\n    }\n\n    /**\n     * Folder title setter\n     * @param {String} newTitle\n     */\n    ,\n    set: function set(newTitle) {\n      this._title = newTitle;\n\n      /**\n       * Update in the Header\n       */\n      this.fillHeader();\n\n      /**\n       * Update in the Aside menu\n       */\n      codex.notes.aside.updateFolderTitleInMenu(this._id, this._title);\n    }\n  }]);\n\n  return Folder;\n}();\n\nexports.default = Folder;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/folder.js?");

/***/ }),

/***/ "./public/javascripts/note.js":
/*!************************************!*\
  !*** ./public/javascripts/note.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar $ = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\").default;\nvar AutoResizer = __webpack_require__(/*! ./autoresizer */ \"./public/javascripts/autoresizer.js\").default;\nvar Dialog = __webpack_require__(/*! ./dialog */ \"./public/javascripts/dialog.js\").default;\nvar Shortcut = __webpack_require__(/*! @codexteam/shortcuts */ \"./node_modules/@codexteam/shortcuts/lib/shortcuts.js\").default;\nvar clipboardUtil = __webpack_require__(/*! ./utils/clipboard */ \"./public/javascripts/utils/clipboard.js\").default;\nvar HashCoder = __webpack_require__(/*! ./utils/hashCoder */ \"./public/javascripts/utils/hashCoder.js\").default;\n\n/**\n * @typedef {Object} NoteData\n * @property {String} _id           — Note's id\n * @property {String} title         — Note's title\n * @property {String} authorId      — Note's Author id\n * @property {String} folderId      - Note's Folder id\n * @property {String} content       - JSON with Note's body\n * @property {Number} dtModify      - timestamp of last modification\n * @property {Number} dtCreate      - timestamp of Note creation\n * @property {Boolean} isRemoved    - Note's removed state\n * @property {String|null} editorVersion - used CodeX Editor version\n */\n\n/**\n * Note section module\n *\n * @typedef {Note} Note\n * @property {number} currentNoteId - id of opened note\n * @property {number} folderId - id of opened folder\n * @property {Element} deleteButton\n * @property {String} hashedNote - hash of last saved note\n * @property {Element} titleEl\n * @property {Element} dateEl\n * @property {Timer} showSavedIndicatorTimer\n * @property {boolean} editorContentSelected - is all document selected by CMD+A\n * @property {ShortCut[]} shortcut\n */\n\nvar Note = function () {\n  /**\n   * @constructor\n   */\n  function Note() {\n    _classCallCheck(this, Note);\n\n    this.hashedNote = null;\n\n    this.deleteButton = $.get('delete-button');\n\n    this.titleEl = document.getElementById('note-title');\n    this.dateEl = document.getElementById('note-date');\n    this.editor = document.getElementById('codex-editor');\n\n    this.showSavedIndicatorTimer = null;\n\n    /**\n     * True after user selects all document by CMD+A\n     * @type {boolean}\n     */\n    this.editorContentSelected = false;\n\n    // when we are creating new note\n    if (!this.autoresizedTitle) {\n      this.autoresizedTitle = new AutoResizer([this.titleEl]);\n    }\n\n    this.shortcuts = [];\n    this.folderId = null;\n    this.currentNoteId = null;\n\n    this.enableShortcuts();\n  }\n\n  /**\n   * CMD+A - select all document\n   * CDM+C - copy selected content (title + editor area)\n   */\n\n\n  _createClass(Note, [{\n    key: 'enableShortcuts',\n    value: function enableShortcuts() {\n      var _this = this;\n\n      var preventDefaultExecution = function preventDefaultExecution(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n      };\n\n      // any click on body prevents content selection\n      // stop preventing copy event\n      document.body.addEventListener('click', function () {\n        _this.editorContentSelected = false;\n        _this.editor.removeEventListener('copy', preventDefaultExecution);\n      }, false);\n\n      /**\n       * Select all document by CMD+A\n       */\n      var selectAllShortcut = new Shortcut({\n        name: 'CMD+A',\n        on: this.editor,\n        callback: function callback(event) {\n          _this.cmdA(event);\n          _this.editor.addEventListener('copy', preventDefaultExecution);\n        }\n      });\n\n      /**\n       * Copy selected document by CMD+C\n       */\n      var copySelectedShortcut = new Shortcut({\n        name: 'CMD+C',\n        on: this.editor,\n        callback: function callback() {\n          _this.cmdC();\n        }\n      });\n\n      this.shortcuts.push(selectAllShortcut);\n      this.shortcuts.push(copySelectedShortcut);\n    }\n\n    /**\n     * CMD+A Shortcut\n     * Selects title + all Note\n     */\n\n  }, {\n    key: 'cmdA',\n    value: function cmdA(event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      this.selectEditorContents();\n    }\n\n    /**\n     * CMD+C Shortcut\n     * Copies selected title and Note\n     */\n\n  }, {\n    key: 'cmdC',\n    value: function cmdC() {\n      if (!this.editorContentSelected) {\n        // selection was cleared\n        return;\n      }\n\n      var editorContent = this.editor.querySelector('.ce-redactor'),\n          formattedText = editorContent.innerText.replace(/\\n/g, '\\n\\n');\n\n      clipboardUtil.copy(this.titleEl.value + '\\n\\n' + formattedText);\n\n      // select content again because we select textarea contents to copy to the clipboard\n      this.selectEditorContents();\n    }\n\n    /**\n     * Send note data to backend\n     * @static\n     */\n\n  }, {\n    key: 'save',\n    value: function save() {\n      var _this2 = this;\n\n      this.deleteButton.classList.remove('hide');\n\n      /**\n       * If folder is opened, pass id. Otherwise pass null\n       */\n      if (!this.folderId) {\n        this.folderId = codex.notes.aside.currentFolder ? codex.notes.aside.currentFolder.id : null;\n      }\n\n      var folderId = this.folderId;\n\n      codex.notes.editor.instance.saver.save().then(function (noteData) {\n        _this2.validate(noteData);\n        return noteData;\n      }).then(function (noteData) {\n        var currentNoteContent = _this2.titleEl.value + JSON.stringify(noteData.items),\n            currentHashedNote = HashCoder.simpleHash(currentNoteContent);\n\n        /** Note wont be saved because hashes are similar */\n        if (currentHashedNote === _this2.hashedNote) {\n          return;\n        }\n\n        /**\n         * If current note changes is not similar to the last saved, than we save new changes and make new hash as current\n         * We do so that to match always match current changes with last saved\n         */\n        _this2.hashedNote = currentHashedNote;\n\n        /**\n         * We should use client-side stringifying\n         * because on the server-side it can generate different string\n         * caused of unmatched order of object properties\n         */\n        noteData.content = JSON.stringify(noteData.items);\n\n        noteData.id = _this2.currentNoteId;\n\n        var note = {\n          data: noteData,\n          title: _this2.titleEl.value.trim(),\n          folderId: folderId\n        };\n\n        var saveIndicator = document.getElementById('save-indicator');\n\n        if (_this2.showSavedIndicatorTimer) {\n          window.clearTimeout(_this2.showSavedIndicatorTimer);\n        }\n\n        saveIndicator.classList.add('saved');\n\n        _this2.showSavedIndicatorTimer = window.setTimeout(function () {\n          saveIndicator.classList.remove('saved');\n        }, 500);\n\n        window.ipcRenderer.send('note - save', { note: note });\n      }).catch(function (err) {\n        console.log('Error while saving note: ', err);\n      });\n    }\n\n    /**\n     * Validate Note data before saving\n     * @param {object} noteData\n     * @throws {Error}\n     */\n\n  }, {\n    key: 'validate',\n    value: function validate(noteData) {\n      if (!noteData.items.length) {\n        throw Error('Article is empty');\n      }\n    }\n\n    /**\n     * Add Note to the menu by Aside.addMenuItem method\n     *\n     * @param {object} data\n     * @param {object} data.note\n     * @param {number} data.note.folderId\n     * @param {number} data.note._id\n     * @param {string} data.note.title\n     * @param {Boolean} data.isRootFolder - true if Note included in the Root Folder\n     */\n\n  }, {\n    key: 'addToMenu',\n    value: function addToMenu(_ref) {\n      var note = _ref.note,\n          isRootFolder = _ref.isRootFolder;\n\n      this.currentNoteId = note._id;\n\n      codex.notes.aside.addMenuItem(note, isRootFolder);\n    }\n\n    /**\n     * Render the Note\n     *\n     * @param {NoteData} note\n     * @param {boolean} saveScrollPosition\n     */\n\n  }, {\n    key: 'render',\n    value: function render(note) {\n      var saveScrollPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var scrollPositionY = 0;\n\n      /**\n       * Save scroll position before rendering\n       */\n      if (saveScrollPosition) {\n        scrollPositionY = window.scrollY;\n      }\n\n      codex.notes.editor.instance.blocks.clear();\n      this.titleEl.value = note.title;\n      this.folderId = note.folderId;\n      this.currentNoteId = note._id;\n\n      /**\n       * We store all times in a Seconds to correspond server-format\n       * @type {Date}\n       */\n      var dtModify = new Date(note.dtModify * 1000);\n\n      /**\n       * Reset cache if new or old note is rendered\n       * we don't need longer the old cache because we match always tha last saved note\n       */\n      HashCoder.resetCache();\n\n      /**\n       * hash note content with title so match with new versions\n       */\n      this.hashedNote = HashCoder.simpleHash(note.title + note.content);\n\n      this.dateEl.textContent = dtModify.toLocaleDateString('en-US', {\n        day: 'numeric',\n        month: 'short',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      });\n\n      var renderData = {\n        id: note._id,\n        items: JSON.parse(note.content),\n        time: note.dtModify,\n        created: note.dtCreate,\n        version: note.editorVersion\n      };\n\n      codex.notes.editor.instance.blocks.render(renderData);\n      this.deleteButton.classList.remove('hide');\n\n      /**\n       * if we are trying to render new note but we have an Autoresizer instance\n       * then we need to clear it before we create new one\n       */\n      if (this.autoresizedTitle) {\n        this.autoresizedTitle.destroy();\n      }\n\n      this.autoresizedTitle = new AutoResizer([this.titleEl]);\n\n      /**\n       * Scroll down scrollPositionY pixels\n       */\n      window.scroll(0, scrollPositionY);\n    }\n\n    /**\n     * Clears editor\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      codex.notes.editor.instance.blocks.clear();\n      this.titleEl.value = '';\n      this.dateEl.textContent = '';\n      this.deleteButton.classList.add('hide');\n      this.currentNoteId = null;\n\n      this.folderId = null;\n\n      // destroy autoresizer\n      this.autoresizedTitle.destroy();\n\n      this.editorContentSelected = false;\n      this.hashedNote = null;\n    }\n\n    /**\n     * Set focus to the Editor\n     */\n\n  }, {\n    key: 'delete',\n\n\n    /**\n     * Delete article\n     */\n    value: function _delete() {\n      var id = this.currentNoteId;\n\n      if (!id) {\n        return;\n      }\n\n      if (Dialog.confirm('Are you sure you want to delete this note?')) {\n        if (!window.ipcRenderer.sendSync('note - delete', { id: id })) {\n          return false;\n        }\n\n        codex.notes.aside.removeMenuItem(id);\n        this.folderId = null; // todo is it necessary?\n        this.clear();\n      }\n    }\n\n    /**\n     * Title input keydowns\n     * @description  By ENTER, sets focus on editor\n     * @param  {Element} titleElement - title block\n     * @param  {Event} event - keydown event\n     */\n\n  }, {\n    key: 'titleKeydownHandler',\n    value: function titleKeydownHandler(titleElement, event) {\n      if (event.keyCode == 13) {\n        event.preventDefault();\n\n        Note.focusEditor();\n      }\n    }\n\n    /**\n     * selects editor with title\n     */\n\n  }, {\n    key: 'selectEditorContents',\n    value: function selectEditorContents() {\n      var range = document.createRange(),\n          selection = window.getSelection();\n\n      range.selectNodeContents(this.editor);\n      selection.removeAllRanges();\n      selection.addRange(range);\n\n      this.editorContentSelected = true;\n    }\n  }], [{\n    key: 'focusEditor',\n    value: function focusEditor() {\n      window.setTimeout(function () {\n        var editor = document.querySelector('.codex-editor__redactor');\n\n        editor.click();\n      }, 10);\n    }\n  }]);\n\n  return Note;\n}();\n\nexports.default = Note;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/note.js?");

/***/ }),

/***/ "./public/javascripts/status-bar.js":
/*!******************************************!*\
  !*** ./public/javascripts/status-bar.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dom = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @module StatusBar\n * @description Module for working with Aside Status Bar\n *\n * @typedef {StatusBar} StatusBar\n * @property {Element} statusBar - Status Bar Element\n */\nvar StatusBar = function () {\n  /**\n   * @constructor\n   * Find status bar Element, init all stuff\n   */\n  function StatusBar() {\n    _classCallCheck(this, StatusBar);\n\n    this.statusBar = _dom2.default.get('status-bar');\n  }\n\n  /**\n   * CSS class names\n   */\n\n\n  _createClass(StatusBar, [{\n    key: 'text',\n\n\n    /**\n     * Update text in the Status Bar\n     * @param {string} statusText - new text\n     */\n    set: function set(statusText) {\n      var _this = this;\n\n      this.statusBar.textContent = statusText;\n\n      this.statusBar.classList.add(StatusBar.CSS.blinked);\n      window.setTimeout(function () {\n        _this.statusBar.classList.remove(StatusBar.CSS.blinked);\n      }, 400);\n    }\n\n    /**\n     * Status Bar text getter\n     */\n    ,\n    get: function get() {\n      return this.statusBar.textContent;\n    }\n\n    /**\n     * Set loading state\n     * @param {boolean} state - true|false\n     */\n\n  }, {\n    key: 'loading',\n    set: function set(state) {\n      this.statusBar.classList.toggle(StatusBar.CSS.loading, state);\n    }\n  }], [{\n    key: 'CSS',\n    get: function get() {\n      return {\n        blinked: 'status-bar--blinked',\n        loading: 'status-bar--loading'\n      };\n    }\n  }]);\n\n  return StatusBar;\n}();\n\nexports.default = StatusBar;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/status-bar.js?");

/***/ }),

/***/ "./public/javascripts/swipe-detector.js":
/*!**********************************************!*\
  !*** ./public/javascripts/swipe-detector.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Two fingers swipe detection class\n */\nvar SwipeDetector = function () {\n  /**\n  * @constructor\n  *\n  * @param {Element} el          - Element to handle swipe\n  * @param {Function} callback   - Callback for swipe event. Accepts {Boolean} directionRight parameter\n  *\n  *\n  * @property {Element} el\n  * @property {Function} callback\n  * @property {Boolean} swiped         -  Flag user to detect horisontal swipe by mousewheel\n  * @property {Timer} wheelTimeout     - Timer for detect swipe\n  */\n  function SwipeDetector(el, callback) {\n    var _this = this;\n\n    _classCallCheck(this, SwipeDetector);\n\n    this.el = el;\n    this.callback = callback;\n    this.swiped = false;\n    this.wheelTimeout = null;\n\n    this.el.addEventListener('mousewheel', function (event) {\n      _this.detectSwipe(event);\n    });\n  }\n\n  /**\n   * Detects two-fingers swipe and fires callback\n   * @fires this.callback\n   * @param {WheelEvent} event - mouse wheel\n   */\n\n\n  _createClass(SwipeDetector, [{\n    key: 'detectSwipe',\n    value: function detectSwipe(event) {\n      var _this2 = this;\n\n      /**\n       * Detect horisontal scroll\n       * @type {Boolean}\n       */\n      var isHorisontal = event.wheelDeltaY === 0;\n\n      /**\n       * Dont fire swipe event on small scrolls\n       * @type {Boolean}\n       */\n      var minimumDistance = 30;\n      var swipeEnoughLong = event.wheelDeltaX > minimumDistance || event.wheelDeltaX < -1 * minimumDistance;\n\n      if (isHorisontal && swipeEnoughLong) {\n        if (!this.swiped) {\n          this.swiped = true;\n\n          /**\n           * Pass directionRight parameter. True for right swipe, false for left swipe\n           */\n          this.callback(event.deltaX > 0);\n\n          this.wheelTimeout = window.setTimeout(function () {\n            _this2.swiped = false;\n          }, 1000);\n        }\n      }\n    }\n  }]);\n\n  return SwipeDetector;\n}();\n\nexports.default = SwipeDetector;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/swipe-detector.js?");

/***/ }),

/***/ "./public/javascripts/user.js":
/*!************************************!*\
  !*** ./public/javascripts/user.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nhelper\nn\n\nvar _dom = __webpack_require__(/*! ./dom */ \"./public/javascripts/dom.js\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _dialog = __webpack_require__(/*! ./dialog */ \"./public/javascripts/dialog.js\");\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class       User\n * @classdesc   Authentication methods and user object\n *\n * @typedef {User} User\n * @property {Element} authButton - button 'Login with Google'\n * @property {Object} userData — current user`s data\n */\nvar User = function () {\n  /**\n   * @constructor\n   */\n  function User() {\n    var _this = this;\n\n    _classCallCheck(this, User);\n\n    this.authButton = _dom2.default.get('js-auth-button');\n\n    this.userData = window.ipcRenderer.sendSync('user - get');\n\n    this.authButton.addEventListener('click', function () {\n      _this.showAuth();\n    });\n  }\n\n  /**\n   * Opens auth popup\n   */\n\n\n  _createClass(User, [{\n    key: 'showAuth',\n    value: function showAuth() {\n      var authResponse = window.ipcRenderer.sendSync('auth - google auth');\n\n      if (authResponse && authResponse.token) {\n        codex.notes.authObserver.login(authResponse);\n        window.ipcRenderer.send('user - sync');\n      } else {\n        _dialog2.default.error('Authentication failed. Please, try again.');\n      }\n    }\n\n    /**\n     * Fills user panel\n     * @param  {Object} user\n     * @param  {String} user.id\n     * @param  {String} user.name\n     * @param  {String} user.photo\n     */\n\n  }, {\n    key: 'fillUserPanel',\n    value: function fillUserPanel(user) {\n      if (!user.name) return;\n\n      var userPanel = _dom2.default.get('user-panel'),\n          photo = _dom2.default.get('user-photo');\n\n      userPanel.classList.add('aside__header-avatar--filled');\n      photo.style.backgroundImage = 'url(' + user.photo + ')';\n    }\n  }]);\n\n  return User;\n}();\n\nexports.default = User;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/user.js?");

/***/ }),

/***/ "./public/javascripts/utils/clipboard.js":
/*!***********************************************!*\
  !*** ./public/javascripts/utils/clipboard.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Clipboard module\n */\nvar Clipboard = function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n  }\n\n  _createClass(Clipboard, null, [{\n    key: 'copy',\n\n    /**\n     * copy to clipboards passed text\n     *\n     * @param {string} text\n     * @return {boolean}\n     */\n    value: function copy(text) {\n      var textarea = document.createElement('textarea'),\n          success = false;\n\n      Object.assign(textarea.style, {\n        position: 'fixed',\n        top: '-100%',\n        left: '-100%',\n        opacity: '0'\n      });\n\n      textarea.value = text;\n\n      document.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        success = document.execCommand('copy');\n      } catch (e) {}\n\n      document.body.removeChild(textarea);\n\n      return success;\n    }\n  }]);\n\n  return Clipboard;\n}();\n\nexports.default = Clipboard;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/utils/clipboard.js?");

/***/ }),

/***/ "./public/javascripts/utils/common.js":
/*!********************************************!*\
  !*** ./public/javascripts/utils/common.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Common methods\n */\nvar Common = function () {\n  function Common() {\n    _classCallCheck(this, Common);\n  }\n\n  _createClass(Common, null, [{\n    key: \"debounce\",\n\n    /**\n     * Debouncing method\n     * Call method after passed time\n     *\n     * @param {Function} func - function that we're throttling\n     * @param {Number} wait - time in milliseconds\n     * @param {Boolean} immediate - call now\n     * @return {Function}\n     */\n    value: function debounce(func, wait, immediate) {\n      var timeout = void 0;\n\n      return function () {\n        var context = this,\n            args = arguments;\n\n        var later = function later() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n\n        var callNow = immediate && !timeout;\n\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n  }]);\n\n  return Common;\n}();\n\nexports.default = Common;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/utils/common.js?");

/***/ }),

/***/ "./public/javascripts/utils/hashCoder.js":
/*!***********************************************!*\
  !*** ./public/javascripts/utils/hashCoder.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * HashCoder util\n */\nvar cachedHashes = {};\n\n/**\n * HashCoder class\n * Util that have hashing methods\n */\n\nvar HashCoder = function () {\n  function HashCoder() {\n    _classCallCheck(this, HashCoder);\n  }\n\n  _createClass(HashCoder, null, [{\n    key: \"resetCache\",\n\n    /**\n     * Flushes cached hashes\n     */\n    value: function resetCache() {\n      cachedHashes = {};\n    }\n\n    /**\n     * Simple hash method\n     * @param {String} text\n     */\n\n  }, {\n    key: \"simpleHash\",\n    value: function simpleHash(text) {\n      /**\n       * Returns hash from cache\n       */\n      if (text && cachedHashes[text]) {\n        return cachedHashes[text];\n      }\n\n      var hash = 0;\n\n      if (text.length == 0) {\n        return hash;\n      }\n\n      for (var i = 0; i < text.length; i++) {\n        var char = text.charCodeAt(i);\n\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash;\n      }\n\n      // save to cache\n      cachedHashes[text] = hash;\n      return hash;\n    }\n  }]);\n\n  return HashCoder;\n}();\n\nexports.default = HashCoder;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/utils/hashCoder.js?");

/***/ }),

/***/ "./public/javascripts/utils/validate.js":
/*!**********************************************!*\
  !*** ./public/javascripts/utils/validate.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Validate module\n */\nvar Validate = function () {\n  function Validate() {\n    _classCallCheck(this, Validate);\n  }\n\n  _createClass(Validate, null, [{\n    key: \"email\",\n\n    /**\n     * Check for email validness\n     *\n     * @param {string} email\n     * @return {boolean}\n     */\n    value: function email(_email) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      return re.test(_email);\n    }\n  }]);\n\n  return Validate;\n}();\n\nexports.default = Validate;\n\n//# sourceURL=webpack://codex.notes/./public/javascripts/utils/validate.js?");

/***/ }),

/***/ "./public/stylesheets/base.css":
/*!*************************************!*\
  !*** ./public/stylesheets/base.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack://codex.notes/./public/stylesheets/base.css?");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"electron\");\n\n//# sourceURL=webpack://codex.notes/external_%22electron%22?");

/***/ })

/******/ });